<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="14610"><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.01%)</title><rect x="0.0068%" y="181" width="0.0137%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="2"/><text x="0.2568%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free_plat (2 samples, 0.01%)</title><rect x="0.0068%" y="165" width="0.0137%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.2568%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="0.0068%" y="149" width="0.0137%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="2"/><text x="0.2568%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (5 samples, 0.03%)</title><rect x="0.0205%" y="165" width="0.0342%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="5"/><text x="0.2705%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_3d (3 samples, 0.02%)</title><rect x="0.0616%" y="165" width="0.0205%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="3"/><text x="0.3116%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (53 samples, 0.36%)</title><rect x="0.0890%" y="165" width="0.3628%" height="15" fill="rgb(232,128,0)" fg:x="13" fg:w="53"/><text x="0.3390%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (18 samples, 0.12%)</title><rect x="0.4517%" y="165" width="0.1232%" height="15" fill="rgb(207,160,47)" fg:x="66" fg:w="18"/><text x="0.7017%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (26 samples, 0.18%)</title><rect x="0.5886%" y="149" width="0.1780%" height="15" fill="rgb(228,23,34)" fg:x="86" fg:w="26"/><text x="0.8386%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (70 samples, 0.48%)</title><rect x="0.7666%" y="149" width="0.4791%" height="15" fill="rgb(218,30,26)" fg:x="112" fg:w="70"/><text x="1.0166%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (14 samples, 0.10%)</title><rect x="1.2457%" y="149" width="0.0958%" height="15" fill="rgb(220,122,19)" fg:x="182" fg:w="14"/><text x="1.4957%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_3d (5 samples, 0.03%)</title><rect x="1.3415%" y="149" width="0.0342%" height="15" fill="rgb(250,228,42)" fg:x="196" fg:w="5"/><text x="1.5915%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (10 samples, 0.07%)</title><rect x="1.3758%" y="149" width="0.0684%" height="15" fill="rgb(240,193,28)" fg:x="201" fg:w="10"/><text x="1.6258%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (9 samples, 0.06%)</title><rect x="1.3826%" y="133" width="0.0616%" height="15" fill="rgb(216,20,37)" fg:x="202" fg:w="9"/><text x="1.6326%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.03%)</title><rect x="1.4100%" y="117" width="0.0342%" height="15" fill="rgb(206,188,39)" fg:x="206" fg:w="5"/><text x="1.6600%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (188 samples, 1.29%)</title><rect x="2.6352%" y="133" width="1.2868%" height="15" fill="rgb(217,207,13)" fg:x="385" fg:w="188"/><text x="2.8852%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (32 samples, 0.22%)</title><rect x="3.9220%" y="133" width="0.2190%" height="15" fill="rgb(231,73,38)" fg:x="573" fg:w="32"/><text x="4.1720%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_chunk::generate_chunk_buffer (612 samples, 4.19%)</title><rect x="0.0205%" y="181" width="4.1889%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="612"/><text x="0.2705%" y="191.50">wcc-5..</text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (531 samples, 3.63%)</title><rect x="0.5749%" y="165" width="3.6345%" height="15" fill="rgb(210,31,41)" fg:x="84" fg:w="531"/><text x="0.8249%" y="175.50">wcc-..</text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (404 samples, 2.77%)</title><rect x="1.4442%" y="149" width="2.7652%" height="15" fill="rgb(221,200,47)" fg:x="211" fg:w="404"/><text x="1.6942%" y="159.50">wc..</text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (10 samples, 0.07%)</title><rect x="4.1410%" y="133" width="0.0684%" height="15" fill="rgb(226,26,5)" fg:x="605" fg:w="10"/><text x="4.3910%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (110 samples, 0.75%)</title><rect x="4.2300%" y="165" width="0.7529%" height="15" fill="rgb(249,33,26)" fg:x="618" fg:w="110"/><text x="4.4800%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro (5,970 samples, 40.86%)</title><rect x="5.0034%" y="165" width="40.8624%" height="15" fill="rgb(235,183,28)" fg:x="731" fg:w="5970"/><text x="5.2534%" y="175.50">wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_bord..</text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro::_{{closure}} (607 samples, 4.15%)</title><rect x="45.8658%" y="165" width="4.1547%" height="15" fill="rgb(221,5,38)" fg:x="6701" fg:w="607"/><text x="46.1158%" y="175.50">wcc-5..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (291 samples, 1.99%)</title><rect x="50.0342%" y="149" width="1.9918%" height="15" fill="rgb(247,18,42)" fg:x="7310" fg:w="291"/><text x="50.2842%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.05%)</title><rect x="52.0329%" y="69" width="0.0479%" height="15" fill="rgb(241,131,45)" fg:x="7602" fg:w="7"/><text x="52.2829%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (7 samples, 0.05%)</title><rect x="52.0329%" y="53" width="0.0479%" height="15" fill="rgb(249,31,29)" fg:x="7602" fg:w="7"/><text x="52.2829%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (7 samples, 0.05%)</title><rect x="52.0329%" y="37" width="0.0479%" height="15" fill="rgb(225,111,53)" fg:x="7602" fg:w="7"/><text x="52.2829%" y="47.50"></text></g><g><title>wcc-5705e778ccbf84ad`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (8 samples, 0.05%)</title><rect x="52.0329%" y="149" width="0.0548%" height="15" fill="rgb(238,160,17)" fg:x="7602" fg:w="8"/><text x="52.2829%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (8 samples, 0.05%)</title><rect x="52.0329%" y="133" width="0.0548%" height="15" fill="rgb(214,148,48)" fg:x="7602" fg:w="8"/><text x="52.2829%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`alloc::raw_vec::finish_grow (8 samples, 0.05%)</title><rect x="52.0329%" y="117" width="0.0548%" height="15" fill="rgb(232,36,49)" fg:x="7602" fg:w="8"/><text x="52.2829%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (8 samples, 0.05%)</title><rect x="52.0329%" y="101" width="0.0548%" height="15" fill="rgb(209,103,24)" fg:x="7602" fg:w="8"/><text x="52.2829%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (8 samples, 0.05%)</title><rect x="52.0329%" y="85" width="0.0548%" height="15" fill="rgb(229,88,8)" fg:x="7602" fg:w="8"/><text x="52.2829%" y="95.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::ptr::drop_in_place&lt;geist_lighting::micro::compute_light_with_borders_buf_micro::DialQ&gt; (136 samples, 0.93%)</title><rect x="52.0876%" y="149" width="0.9309%" height="15" fill="rgb(213,181,19)" fg:x="7610" fg:w="136"/><text x="52.3376%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (136 samples, 0.93%)</title><rect x="52.0876%" y="133" width="0.9309%" height="15" fill="rgb(254,191,54)" fg:x="7610" fg:w="136"/><text x="52.3376%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (135 samples, 0.92%)</title><rect x="52.0945%" y="117" width="0.9240%" height="15" fill="rgb(241,83,37)" fg:x="7611" fg:w="135"/><text x="52.3445%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (135 samples, 0.92%)</title><rect x="52.0945%" y="101" width="0.9240%" height="15" fill="rgb(233,36,39)" fg:x="7611" fg:w="135"/><text x="52.3445%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (135 samples, 0.92%)</title><rect x="52.0945%" y="85" width="0.9240%" height="15" fill="rgb(226,3,54)" fg:x="7611" fg:w="135"/><text x="52.3445%" y="95.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro::_{{closure}} (5,788 samples, 39.62%)</title><rect x="53.0185%" y="149" width="39.6167%" height="15" fill="rgb(245,192,40)" fg:x="7746" fg:w="5788"/><text x="53.2685%" y="159.50">wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_bo..</text></g><g><title>wcc-5705e778ccbf84ad`core::ptr::drop_in_place&lt;geist_world::worldgen::WorldGenParams&gt; (3 samples, 0.02%)</title><rect x="92.6420%" y="133" width="0.0205%" height="15" fill="rgb(238,167,29)" fg:x="13535" fg:w="3"/><text x="92.8920%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 0.02%)</title><rect x="92.6420%" y="117" width="0.0205%" height="15" fill="rgb(232,182,51)" fg:x="13535" fg:w="3"/><text x="92.8920%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (2 samples, 0.01%)</title><rect x="92.6626%" y="133" width="0.0137%" height="15" fill="rgb(231,60,39)" fg:x="13538" fg:w="2"/><text x="92.9126%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (4 samples, 0.03%)</title><rect x="92.6762%" y="133" width="0.0274%" height="15" fill="rgb(208,69,12)" fg:x="13540" fg:w="4"/><text x="92.9262%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (7 samples, 0.05%)</title><rect x="92.7173%" y="117" width="0.0479%" height="15" fill="rgb(235,93,37)" fg:x="13546" fg:w="7"/><text x="92.9673%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (7 samples, 0.05%)</title><rect x="92.7652%" y="117" width="0.0479%" height="15" fill="rgb(213,116,39)" fg:x="13553" fg:w="7"/><text x="93.0152%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_3d (3 samples, 0.02%)</title><rect x="92.8131%" y="117" width="0.0205%" height="15" fill="rgb(222,207,29)" fg:x="13560" fg:w="3"/><text x="93.0631%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (3 samples, 0.02%)</title><rect x="92.8337%" y="117" width="0.0205%" height="15" fill="rgb(206,96,30)" fg:x="13563" fg:w="3"/><text x="93.0837%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (24 samples, 0.16%)</title><rect x="92.9911%" y="101" width="0.1643%" height="15" fill="rgb(218,138,4)" fg:x="13586" fg:w="24"/><text x="93.2411%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (4 samples, 0.03%)</title><rect x="93.1554%" y="101" width="0.0274%" height="15" fill="rgb(250,191,14)" fg:x="13610" fg:w="4"/><text x="93.4054%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (71 samples, 0.49%)</title><rect x="92.7105%" y="133" width="0.4860%" height="15" fill="rgb(239,60,40)" fg:x="13545" fg:w="71"/><text x="92.9605%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (50 samples, 0.34%)</title><rect x="92.8542%" y="117" width="0.3422%" height="15" fill="rgb(206,27,48)" fg:x="13566" fg:w="50"/><text x="93.1042%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (2 samples, 0.01%)</title><rect x="93.1828%" y="101" width="0.0137%" height="15" fill="rgb(225,35,8)" fg:x="13614" fg:w="2"/><text x="93.4328%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="93.2101%" y="101" width="0.0205%" height="15" fill="rgb(250,213,24)" fg:x="13618" fg:w="3"/><text x="93.4601%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.02%)</title><rect x="93.2101%" y="85" width="0.0205%" height="15" fill="rgb(247,123,22)" fg:x="13618" fg:w="3"/><text x="93.4601%" y="95.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime (88 samples, 0.60%)</title><rect x="92.6352%" y="149" width="0.6023%" height="15" fill="rgb(231,138,38)" fg:x="13534" fg:w="88"/><text x="92.8852%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::make_gen_ctx (6 samples, 0.04%)</title><rect x="93.1964%" y="133" width="0.0411%" height="15" fill="rgb(231,145,46)" fg:x="13616" fg:w="6"/><text x="93.4464%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;geist_world::worldgen::WorldGenParams as core::clone::Clone&gt;::clone (6 samples, 0.04%)</title><rect x="93.1964%" y="117" width="0.0411%" height="15" fill="rgb(251,118,11)" fg:x="13616" fg:w="6"/><text x="93.4464%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro (6,315 samples, 43.22%)</title><rect x="50.0205%" y="165" width="43.2238%" height="15" fill="rgb(217,147,25)" fg:x="7308" fg:w="6315"/><text x="50.2705%" y="175.50">wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_..</text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::sample_face_local_s2 (5 samples, 0.03%)</title><rect x="93.2444%" y="149" width="0.0342%" height="15" fill="rgb(247,81,37)" fg:x="13623" fg:w="5"/><text x="93.4944%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_y (7 samples, 0.05%)</title><rect x="93.2923%" y="149" width="0.0479%" height="15" fill="rgb(209,12,38)" fg:x="13630" fg:w="7"/><text x="93.5423%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::KeyTable::ensure (4 samples, 0.03%)</title><rect x="93.3128%" y="133" width="0.0274%" height="15" fill="rgb(227,1,9)" fg:x="13633" fg:w="4"/><text x="93.5628%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="93.3196%" y="117" width="0.0205%" height="15" fill="rgb(248,47,43)" fg:x="13634" fg:w="3"/><text x="93.5696%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::add_cube (15 samples, 0.10%)</title><rect x="93.2444%" y="165" width="0.1027%" height="15" fill="rgb(221,10,30)" fg:x="13623" fg:w="15"/><text x="93.4944%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_free (3 samples, 0.02%)</title><rect x="93.3539%" y="133" width="0.0205%" height="15" fill="rgb(210,229,1)" fg:x="13639" fg:w="3"/><text x="93.6039%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::ptr::drop_in_place&lt;geist_world::worldgen::WorldGenParams&gt; (8 samples, 0.05%)</title><rect x="93.4018%" y="133" width="0.0548%" height="15" fill="rgb(222,148,37)" fg:x="13646" fg:w="8"/><text x="93.6518%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.05%)</title><rect x="93.4018%" y="117" width="0.0548%" height="15" fill="rgb(234,67,33)" fg:x="13646" fg:w="8"/><text x="93.6518%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (2 samples, 0.01%)</title><rect x="93.4702%" y="117" width="0.0137%" height="15" fill="rgb(247,98,35)" fg:x="13656" fg:w="2"/><text x="93.7202%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="93.4702%" y="101" width="0.0137%" height="15" fill="rgb(247,138,52)" fg:x="13656" fg:w="2"/><text x="93.7202%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (9 samples, 0.06%)</title><rect x="93.4565%" y="133" width="0.0616%" height="15" fill="rgb(213,79,30)" fg:x="13654" fg:w="9"/><text x="93.7065%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (5 samples, 0.03%)</title><rect x="93.4839%" y="117" width="0.0342%" height="15" fill="rgb(246,177,23)" fg:x="13658" fg:w="5"/><text x="93.7339%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (3 samples, 0.02%)</title><rect x="93.4976%" y="101" width="0.0205%" height="15" fill="rgb(230,62,27)" fg:x="13660" fg:w="3"/><text x="93.7476%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (3 samples, 0.02%)</title><rect x="93.5181%" y="101" width="0.0205%" height="15" fill="rgb(216,154,8)" fg:x="13663" fg:w="3"/><text x="93.7681%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="93.5387%" y="101" width="0.0137%" height="15" fill="rgb(244,35,45)" fg:x="13666" fg:w="2"/><text x="93.7887%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.04%)</title><rect x="93.5524%" y="101" width="0.0411%" height="15" fill="rgb(251,115,12)" fg:x="13668" fg:w="6"/><text x="93.8024%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (2 samples, 0.01%)</title><rect x="93.5797%" y="85" width="0.0137%" height="15" fill="rgb(240,54,50)" fg:x="13672" fg:w="2"/><text x="93.8297%" y="95.50"></text></g><g><title>wcc-5705e778ccbf84ad`DYLD-STUB$$malloc (2 samples, 0.01%)</title><rect x="93.6003%" y="101" width="0.0137%" height="15" fill="rgb(233,84,52)" fg:x="13675" fg:w="2"/><text x="93.8503%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::add_water_cube (42 samples, 0.29%)</title><rect x="93.3470%" y="165" width="0.2875%" height="15" fill="rgb(207,117,47)" fg:x="13638" fg:w="42"/><text x="93.5970%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime (41 samples, 0.28%)</title><rect x="93.3539%" y="149" width="0.2806%" height="15" fill="rgb(249,43,39)" fg:x="13639" fg:w="41"/><text x="93.6039%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::make_gen_ctx (17 samples, 0.12%)</title><rect x="93.5181%" y="133" width="0.1164%" height="15" fill="rgb(209,38,44)" fg:x="13663" fg:w="17"/><text x="93.7681%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;geist_world::worldgen::WorldGenParams as core::clone::Clone&gt;::clone (17 samples, 0.12%)</title><rect x="93.5181%" y="117" width="0.1164%" height="15" fill="rgb(236,212,23)" fg:x="13663" fg:w="17"/><text x="93.7681%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`__rdl_alloc (2 samples, 0.01%)</title><rect x="93.6208%" y="101" width="0.0137%" height="15" fill="rgb(242,79,21)" fg:x="13678" fg:w="2"/><text x="93.8708%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::emit_into (78 samples, 0.53%)</title><rect x="93.6345%" y="165" width="0.5339%" height="15" fill="rgb(211,96,35)" fg:x="13680" fg:w="78"/><text x="93.8845%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::emit::emit_face_rect_for_clipped (3 samples, 0.02%)</title><rect x="94.1478%" y="149" width="0.0205%" height="15" fill="rgb(253,215,40)" fg:x="13755" fg:w="3"/><text x="94.3978%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::mesh_build::MeshBuild::add_face_rect (3 samples, 0.02%)</title><rect x="94.1478%" y="133" width="0.0205%" height="15" fill="rgb(211,81,21)" fg:x="13755" fg:w="3"/><text x="94.3978%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::mesh_build::MeshBuild::add_quad (2 samples, 0.01%)</title><rect x="94.1547%" y="117" width="0.0137%" height="15" fill="rgb(208,190,38)" fg:x="13756" fg:w="2"/><text x="94.4047%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::new (6 samples, 0.04%)</title><rect x="94.1684%" y="165" width="0.0411%" height="15" fill="rgb(235,213,38)" fg:x="13758" fg:w="6"/><text x="94.4184%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.04%)</title><rect x="94.1684%" y="149" width="0.0411%" height="15" fill="rgb(237,122,38)" fg:x="13758" fg:w="6"/><text x="94.4184%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (6 samples, 0.04%)</title><rect x="94.1684%" y="133" width="0.0411%" height="15" fill="rgb(244,218,35)" fg:x="13758" fg:w="6"/><text x="94.4184%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.01%)</title><rect x="94.2094%" y="133" width="0.0137%" height="15" fill="rgb(240,68,47)" fg:x="13764" fg:w="2"/><text x="94.4594%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::ptr::drop_in_place&lt;geist_world::worldgen::WorldGenParams&gt; (2 samples, 0.01%)</title><rect x="94.2300%" y="133" width="0.0137%" height="15" fill="rgb(210,16,53)" fg:x="13767" fg:w="2"/><text x="94.4800%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.01%)</title><rect x="94.2300%" y="117" width="0.0137%" height="15" fill="rgb(235,124,12)" fg:x="13767" fg:w="2"/><text x="94.4800%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (2 samples, 0.01%)</title><rect x="94.2505%" y="133" width="0.0137%" height="15" fill="rgb(224,169,11)" fg:x="13770" fg:w="2"/><text x="94.5005%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (2 samples, 0.01%)</title><rect x="94.2642%" y="117" width="0.0137%" height="15" fill="rgb(250,166,2)" fg:x="13772" fg:w="2"/><text x="94.5142%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (2 samples, 0.01%)</title><rect x="94.2779%" y="117" width="0.0137%" height="15" fill="rgb(242,216,29)" fg:x="13774" fg:w="2"/><text x="94.5279%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (3 samples, 0.02%)</title><rect x="94.2916%" y="117" width="0.0205%" height="15" fill="rgb(230,116,27)" fg:x="13776" fg:w="3"/><text x="94.5416%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (6 samples, 0.04%)</title><rect x="94.3874%" y="101" width="0.0411%" height="15" fill="rgb(228,99,48)" fg:x="13790" fg:w="6"/><text x="94.6374%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (29 samples, 0.20%)</title><rect x="94.2642%" y="133" width="0.1985%" height="15" fill="rgb(253,11,6)" fg:x="13772" fg:w="29"/><text x="94.5142%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (22 samples, 0.15%)</title><rect x="94.3121%" y="117" width="0.1506%" height="15" fill="rgb(247,143,39)" fg:x="13779" fg:w="22"/><text x="94.5621%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (5 samples, 0.03%)</title><rect x="94.4285%" y="101" width="0.0342%" height="15" fill="rgb(236,97,10)" fg:x="13796" fg:w="5"/><text x="94.6785%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (4 samples, 0.03%)</title><rect x="94.4695%" y="101" width="0.0274%" height="15" fill="rgb(233,208,19)" fg:x="13802" fg:w="4"/><text x="94.7195%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (13,807 samples, 94.50%)</title><rect x="0.0068%" y="213" width="94.5038%" height="15" fill="rgb(216,164,2)" fg:x="1" fg:w="13807"/><text x="0.2568%" y="223.50">wcc-5705e778ccbf84ad`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>wcc-5705e778ccbf84ad`criterion::bencher::Bencher&lt;M&gt;::iter (13,807 samples, 94.50%)</title><rect x="0.0068%" y="197" width="94.5038%" height="15" fill="rgb(220,129,5)" fg:x="1" fg:w="13807"/><text x="0.2568%" y="207.50">wcc-5705e778ccbf84ad`criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::build::build_chunk_wcc_cpu_buf (13,193 samples, 90.30%)</title><rect x="4.2094%" y="181" width="90.3012%" height="15" fill="rgb(242,17,10)" fg:x="615" fg:w="13193"/><text x="4.4594%" y="191.50">wcc-5705e778ccbf84ad`geist_mesh_cpu::build::build_chunk_wcc_cpu_buf</text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::seed_neighbor_seams (44 samples, 0.30%)</title><rect x="94.2094%" y="165" width="0.3012%" height="15" fill="rgb(242,107,0)" fg:x="13764" fg:w="44"/><text x="94.4594%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime (44 samples, 0.30%)</title><rect x="94.2094%" y="149" width="0.3012%" height="15" fill="rgb(251,28,31)" fg:x="13764" fg:w="44"/><text x="94.4594%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::make_gen_ctx (7 samples, 0.05%)</title><rect x="94.4627%" y="133" width="0.0479%" height="15" fill="rgb(233,223,10)" fg:x="13801" fg:w="7"/><text x="94.7127%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;geist_world::worldgen::WorldGenParams as core::clone::Clone&gt;::clone (7 samples, 0.05%)</title><rect x="94.4627%" y="117" width="0.0479%" height="15" fill="rgb(215,21,27)" fg:x="13801" fg:w="7"/><text x="94.7127%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (9 samples, 0.06%)</title><rect x="94.5243%" y="149" width="0.0616%" height="15" fill="rgb(232,23,21)" fg:x="13810" fg:w="9"/><text x="94.7743%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (26 samples, 0.18%)</title><rect x="94.5927%" y="149" width="0.1780%" height="15" fill="rgb(244,5,23)" fg:x="13820" fg:w="26"/><text x="94.8427%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (3 samples, 0.02%)</title><rect x="94.7707%" y="149" width="0.0205%" height="15" fill="rgb(226,81,46)" fg:x="13846" fg:w="3"/><text x="95.0207%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (10 samples, 0.07%)</title><rect x="94.7981%" y="133" width="0.0684%" height="15" fill="rgb(247,70,30)" fg:x="13850" fg:w="10"/><text x="95.0481%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (42 samples, 0.29%)</title><rect x="94.8665%" y="133" width="0.2875%" height="15" fill="rgb(212,68,19)" fg:x="13860" fg:w="42"/><text x="95.1165%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (5 samples, 0.03%)</title><rect x="95.1540%" y="133" width="0.0342%" height="15" fill="rgb(240,187,13)" fg:x="13902" fg:w="5"/><text x="95.4040%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_3d (7 samples, 0.05%)</title><rect x="95.1882%" y="133" width="0.0479%" height="15" fill="rgb(223,113,26)" fg:x="13907" fg:w="7"/><text x="95.4382%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (3 samples, 0.02%)</title><rect x="95.2361%" y="133" width="0.0205%" height="15" fill="rgb(206,192,2)" fg:x="13914" fg:w="3"/><text x="95.4861%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="95.2430%" y="117" width="0.0137%" height="15" fill="rgb(241,108,4)" fg:x="13915" fg:w="2"/><text x="95.4930%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (68 samples, 0.47%)</title><rect x="95.7700%" y="117" width="0.4654%" height="15" fill="rgb(247,173,49)" fg:x="13992" fg:w="68"/><text x="96.0200%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (8 samples, 0.05%)</title><rect x="96.2355%" y="117" width="0.0548%" height="15" fill="rgb(224,114,35)" fg:x="14060" fg:w="8"/><text x="96.4855%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_chunk::generate_chunk_buffer (260 samples, 1.78%)</title><rect x="94.5175%" y="165" width="1.7796%" height="15" fill="rgb(245,159,27)" fg:x="13809" fg:w="260"/><text x="94.7675%" y="175.50">w..</text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (220 samples, 1.51%)</title><rect x="94.7912%" y="149" width="1.5058%" height="15" fill="rgb(245,172,44)" fg:x="13849" fg:w="220"/><text x="95.0412%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (152 samples, 1.04%)</title><rect x="95.2567%" y="133" width="1.0404%" height="15" fill="rgb(236,23,11)" fg:x="13917" fg:w="152"/><text x="95.5067%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (3 samples, 0.02%)</title><rect x="96.3176%" y="133" width="0.0205%" height="15" fill="rgb(205,117,38)" fg:x="14072" fg:w="3"/><text x="96.5676%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (4 samples, 0.03%)</title><rect x="96.3450%" y="133" width="0.0274%" height="15" fill="rgb(237,72,25)" fg:x="14076" fg:w="4"/><text x="96.5950%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (4 samples, 0.03%)</title><rect x="96.3450%" y="117" width="0.0274%" height="15" fill="rgb(244,70,9)" fg:x="14076" fg:w="4"/><text x="96.5950%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="96.3518%" y="101" width="0.0205%" height="15" fill="rgb(217,125,39)" fg:x="14077" fg:w="3"/><text x="96.6018%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::compute_with_borders_buf (20 samples, 0.14%)</title><rect x="96.2971%" y="165" width="0.1369%" height="15" fill="rgb(235,36,10)" fg:x="14069" fg:w="20"/><text x="96.5471%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::compute_with_borders_buf::_{{closure}} (18 samples, 0.12%)</title><rect x="96.3107%" y="149" width="0.1232%" height="15" fill="rgb(251,123,47)" fg:x="14071" fg:w="18"/><text x="96.5607%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::can_cross_face_s2 (9 samples, 0.06%)</title><rect x="96.3723%" y="133" width="0.0616%" height="15" fill="rgb(221,13,13)" fg:x="14080" fg:w="9"/><text x="96.6223%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::micro::micro_face_cell_open_s2 (6 samples, 0.04%)</title><rect x="96.3929%" y="117" width="0.0411%" height="15" fill="rgb(238,131,9)" fg:x="14083" fg:w="6"/><text x="96.6429%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::sample_face_local_s2 (2 samples, 0.01%)</title><rect x="96.4339%" y="165" width="0.0137%" height="15" fill="rgb(211,50,8)" fg:x="14089" fg:w="2"/><text x="96.6839%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro (23 samples, 0.16%)</title><rect x="96.4545%" y="149" width="0.1574%" height="15" fill="rgb(245,182,24)" fg:x="14092" fg:w="23"/><text x="96.7045%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro::_{{closure}} (12 samples, 0.08%)</title><rect x="96.6324%" y="133" width="0.0821%" height="15" fill="rgb(242,14,37)" fg:x="14118" fg:w="12"/><text x="96.8824%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_free (2 samples, 0.01%)</title><rect x="96.7146%" y="117" width="0.0137%" height="15" fill="rgb(246,228,12)" fg:x="14130" fg:w="2"/><text x="96.9646%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (3 samples, 0.02%)</title><rect x="96.7625%" y="101" width="0.0205%" height="15" fill="rgb(213,55,15)" fg:x="14137" fg:w="3"/><text x="97.0125%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (5 samples, 0.03%)</title><rect x="96.8104%" y="85" width="0.0342%" height="15" fill="rgb(209,9,3)" fg:x="14144" fg:w="5"/><text x="97.0604%" y="95.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (16 samples, 0.11%)</title><rect x="96.7420%" y="117" width="0.1095%" height="15" fill="rgb(230,59,30)" fg:x="14134" fg:w="16"/><text x="96.9920%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (8 samples, 0.05%)</title><rect x="96.7967%" y="101" width="0.0548%" height="15" fill="rgb(209,121,21)" fg:x="14142" fg:w="8"/><text x="97.0467%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro (35 samples, 0.24%)</title><rect x="96.6188%" y="149" width="0.2396%" height="15" fill="rgb(220,109,13)" fg:x="14116" fg:w="35"/><text x="96.8688%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime (21 samples, 0.14%)</title><rect x="96.7146%" y="133" width="0.1437%" height="15" fill="rgb(232,18,1)" fg:x="14130" fg:w="21"/><text x="96.9646%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::sample_face_local_s2 (11 samples, 0.08%)</title><rect x="96.8583%" y="133" width="0.0753%" height="15" fill="rgb(215,41,42)" fg:x="14151" fg:w="11"/><text x="97.1083%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_x (5 samples, 0.03%)</title><rect x="96.9336%" y="133" width="0.0342%" height="15" fill="rgb(224,123,36)" fg:x="14162" fg:w="5"/><text x="97.1836%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::KeyTable::ensure (4 samples, 0.03%)</title><rect x="96.9405%" y="117" width="0.0274%" height="15" fill="rgb(240,125,3)" fg:x="14163" fg:w="4"/><text x="97.1905%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="96.9473%" y="101" width="0.0205%" height="15" fill="rgb(205,98,50)" fg:x="14164" fg:w="3"/><text x="97.1973%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="96.9473%" y="85" width="0.0205%" height="15" fill="rgb(205,185,37)" fg:x="14164" fg:w="3"/><text x="97.1973%" y="95.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_y (4 samples, 0.03%)</title><rect x="96.9678%" y="133" width="0.0274%" height="15" fill="rgb(238,207,15)" fg:x="14167" fg:w="4"/><text x="97.2178%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::KeyTable::ensure (3 samples, 0.02%)</title><rect x="96.9747%" y="117" width="0.0205%" height="15" fill="rgb(213,199,42)" fg:x="14168" fg:w="3"/><text x="97.2247%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="96.9815%" y="101" width="0.0137%" height="15" fill="rgb(235,201,11)" fg:x="14169" fg:w="2"/><text x="97.2315%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::add_cube (23 samples, 0.16%)</title><rect x="96.8583%" y="149" width="0.1574%" height="15" fill="rgb(207,46,11)" fg:x="14151" fg:w="23"/><text x="97.1083%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_z (3 samples, 0.02%)</title><rect x="96.9952%" y="133" width="0.0205%" height="15" fill="rgb(241,35,35)" fg:x="14171" fg:w="3"/><text x="97.2452%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::emit_into (21 samples, 0.14%)</title><rect x="97.0157%" y="149" width="0.1437%" height="15" fill="rgb(243,32,47)" fg:x="14174" fg:w="21"/><text x="97.2657%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (4 samples, 0.03%)</title><rect x="97.1937%" y="85" width="0.0274%" height="15" fill="rgb(247,202,23)" fg:x="14200" fg:w="4"/><text x="97.4437%" y="95.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (9 samples, 0.06%)</title><rect x="97.1663%" y="117" width="0.0616%" height="15" fill="rgb(219,102,11)" fg:x="14196" fg:w="9"/><text x="97.4163%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (6 samples, 0.04%)</title><rect x="97.1869%" y="101" width="0.0411%" height="15" fill="rgb(243,110,44)" fg:x="14199" fg:w="6"/><text x="97.4369%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::seed_neighbor_seams (11 samples, 0.08%)</title><rect x="97.1595%" y="149" width="0.0753%" height="15" fill="rgb(222,74,54)" fg:x="14195" fg:w="11"/><text x="97.4095%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime (10 samples, 0.07%)</title><rect x="97.1663%" y="133" width="0.0684%" height="15" fill="rgb(216,99,12)" fg:x="14196" fg:w="10"/><text x="97.4163%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::build::build_chunk_wcc_cpu_buf (116 samples, 0.79%)</title><rect x="96.4476%" y="165" width="0.7940%" height="15" fill="rgb(226,22,26)" fg:x="14091" fg:w="116"/><text x="96.6976%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::sample_face_local_s2 (13 samples, 0.09%)</title><rect x="97.2485%" y="149" width="0.0890%" height="15" fill="rgb(217,163,10)" fg:x="14208" fg:w="13"/><text x="97.4985%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="97.3648%" y="133" width="0.0137%" height="15" fill="rgb(213,25,53)" fg:x="14225" fg:w="2"/><text x="97.6148%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_x (12 samples, 0.08%)</title><rect x="97.3374%" y="149" width="0.0821%" height="15" fill="rgb(252,105,26)" fg:x="14221" fg:w="12"/><text x="97.5874%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::KeyTable::ensure (6 samples, 0.04%)</title><rect x="97.3785%" y="133" width="0.0411%" height="15" fill="rgb(220,39,43)" fg:x="14227" fg:w="6"/><text x="97.6285%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="97.3854%" y="117" width="0.0342%" height="15" fill="rgb(229,68,48)" fg:x="14228" fg:w="5"/><text x="97.6354%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_y (15 samples, 0.10%)</title><rect x="97.4196%" y="149" width="0.1027%" height="15" fill="rgb(252,8,32)" fg:x="14233" fg:w="15"/><text x="97.6696%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::KeyTable::ensure (7 samples, 0.05%)</title><rect x="97.4743%" y="133" width="0.0479%" height="15" fill="rgb(223,20,43)" fg:x="14241" fg:w="7"/><text x="97.7243%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="97.4880%" y="117" width="0.0342%" height="15" fill="rgb(229,81,49)" fg:x="14243" fg:w="5"/><text x="97.7380%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="97.4949%" y="101" width="0.0274%" height="15" fill="rgb(236,28,36)" fg:x="14244" fg:w="4"/><text x="97.7449%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="97.5633%" y="133" width="0.0137%" height="15" fill="rgb(249,185,26)" fg:x="14254" fg:w="2"/><text x="97.8133%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::add_cube (57 samples, 0.39%)</title><rect x="97.2416%" y="165" width="0.3901%" height="15" fill="rgb(249,174,33)" fg:x="14207" fg:w="57"/><text x="97.4916%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_z (16 samples, 0.11%)</title><rect x="97.5222%" y="149" width="0.1095%" height="15" fill="rgb(233,201,37)" fg:x="14248" fg:w="16"/><text x="97.7722%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::KeyTable::ensure (8 samples, 0.05%)</title><rect x="97.5770%" y="133" width="0.0548%" height="15" fill="rgb(221,78,26)" fg:x="14256" fg:w="8"/><text x="97.8270%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (6 samples, 0.04%)</title><rect x="97.5907%" y="117" width="0.0411%" height="15" fill="rgb(250,127,30)" fg:x="14258" fg:w="6"/><text x="97.8407%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="97.6112%" y="101" width="0.0205%" height="15" fill="rgb(230,49,44)" fg:x="14261" fg:w="3"/><text x="97.8612%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::add_micro (3 samples, 0.02%)</title><rect x="97.6318%" y="165" width="0.0205%" height="15" fill="rgb(229,67,23)" fg:x="14264" fg:w="3"/><text x="97.8818%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_y (2 samples, 0.01%)</title><rect x="97.6386%" y="149" width="0.0137%" height="15" fill="rgb(249,83,47)" fg:x="14265" fg:w="2"/><text x="97.8886%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::emit_into (25 samples, 0.17%)</title><rect x="97.6591%" y="165" width="0.1711%" height="15" fill="rgb(215,43,3)" fg:x="14268" fg:w="25"/><text x="97.9091%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::emit::emit_face_rect_for_clipped (3 samples, 0.02%)</title><rect x="97.8097%" y="149" width="0.0205%" height="15" fill="rgb(238,154,13)" fg:x="14290" fg:w="3"/><text x="98.0597%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::mesh_build::MeshBuild::add_face_rect (3 samples, 0.02%)</title><rect x="97.8097%" y="133" width="0.0205%" height="15" fill="rgb(219,56,2)" fg:x="14290" fg:w="3"/><text x="98.0597%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::mesh_build::MeshBuild::add_quad (3 samples, 0.02%)</title><rect x="97.8097%" y="117" width="0.0205%" height="15" fill="rgb(233,0,4)" fg:x="14290" fg:w="3"/><text x="98.0597%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (3 samples, 0.02%)</title><rect x="97.8782%" y="101" width="0.0205%" height="15" fill="rgb(235,30,7)" fg:x="14300" fg:w="3"/><text x="98.1282%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (9 samples, 0.06%)</title><rect x="97.8439%" y="133" width="0.0616%" height="15" fill="rgb(250,79,13)" fg:x="14295" fg:w="9"/><text x="98.0939%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (6 samples, 0.04%)</title><rect x="97.8645%" y="117" width="0.0411%" height="15" fill="rgb(211,146,34)" fg:x="14298" fg:w="6"/><text x="98.1145%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::seed_neighbor_seams (11 samples, 0.08%)</title><rect x="97.8371%" y="165" width="0.0753%" height="15" fill="rgb(228,22,38)" fg:x="14294" fg:w="11"/><text x="98.0871%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime (11 samples, 0.08%)</title><rect x="97.8371%" y="149" width="0.0753%" height="15" fill="rgb(235,168,5)" fg:x="14294" fg:w="11"/><text x="98.0871%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (498 samples, 3.41%)</title><rect x="94.5175%" y="197" width="3.4086%" height="15" fill="rgb(221,155,16)" fg:x="13809" fg:w="498"/><text x="94.7675%" y="207.50">wcc..</text></g><g><title>wcc-5705e778ccbf84ad`criterion::bencher::Bencher&lt;M&gt;::iter (498 samples, 3.41%)</title><rect x="94.5175%" y="181" width="3.4086%" height="15" fill="rgb(215,215,53)" fg:x="13809" fg:w="498"/><text x="94.7675%" y="191.50">wcc..</text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (7 samples, 0.05%)</title><rect x="97.9329%" y="181" width="0.0479%" height="15" fill="rgb(223,4,10)" fg:x="14308" fg:w="7"/><text x="98.1829%" y="191.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (32 samples, 0.22%)</title><rect x="98.0014%" y="181" width="0.2190%" height="15" fill="rgb(234,103,6)" fg:x="14318" fg:w="32"/><text x="98.2514%" y="191.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (5 samples, 0.03%)</title><rect x="98.2204%" y="181" width="0.0342%" height="15" fill="rgb(227,97,0)" fg:x="14350" fg:w="5"/><text x="98.4704%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="98.2546%" y="165" width="0.0137%" height="15" fill="rgb(234,150,53)" fg:x="14355" fg:w="2"/><text x="98.5046%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (17 samples, 0.12%)</title><rect x="98.2683%" y="165" width="0.1164%" height="15" fill="rgb(228,201,54)" fg:x="14357" fg:w="17"/><text x="98.5183%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (47 samples, 0.32%)</title><rect x="98.3847%" y="165" width="0.3217%" height="15" fill="rgb(222,22,37)" fg:x="14374" fg:w="47"/><text x="98.6347%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (6 samples, 0.04%)</title><rect x="98.7064%" y="165" width="0.0411%" height="15" fill="rgb(237,53,32)" fg:x="14421" fg:w="6"/><text x="98.9564%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_3d (7 samples, 0.05%)</title><rect x="98.7474%" y="165" width="0.0479%" height="15" fill="rgb(233,25,53)" fg:x="14427" fg:w="7"/><text x="98.9974%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (6 samples, 0.04%)</title><rect x="98.7953%" y="165" width="0.0411%" height="15" fill="rgb(210,40,34)" fg:x="14434" fg:w="6"/><text x="99.0453%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="98.8022%" y="149" width="0.0342%" height="15" fill="rgb(241,220,44)" fg:x="14435" fg:w="5"/><text x="99.0522%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (5 samples, 0.03%)</title><rect x="98.8022%" y="133" width="0.0342%" height="15" fill="rgb(235,28,35)" fg:x="14435" fg:w="5"/><text x="99.0522%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (59 samples, 0.40%)</title><rect x="99.2266%" y="149" width="0.4038%" height="15" fill="rgb(210,56,17)" fg:x="14497" fg:w="59"/><text x="99.4766%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (12 samples, 0.08%)</title><rect x="99.6304%" y="149" width="0.0821%" height="15" fill="rgb(224,130,29)" fg:x="14556" fg:w="12"/><text x="99.8804%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_chunk::generate_chunk_buffer (261 samples, 1.79%)</title><rect x="97.9329%" y="197" width="1.7864%" height="15" fill="rgb(235,212,8)" fg:x="14308" fg:w="261"/><text x="98.1829%" y="207.50">w..</text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (214 samples, 1.46%)</title><rect x="98.2546%" y="181" width="1.4648%" height="15" fill="rgb(223,33,50)" fg:x="14355" fg:w="214"/><text x="98.5046%" y="191.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (129 samples, 0.88%)</title><rect x="98.8364%" y="165" width="0.8830%" height="15" fill="rgb(219,149,13)" fg:x="14440" fg:w="129"/><text x="99.0864%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (2 samples, 0.01%)</title><rect x="99.7331%" y="181" width="0.0137%" height="15" fill="rgb(250,156,29)" fg:x="14571" fg:w="2"/><text x="99.9831%" y="191.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="99.7331%" y="165" width="0.0137%" height="15" fill="rgb(216,193,19)" fg:x="14571" fg:w="2"/><text x="99.9831%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 0.01%)</title><rect x="99.7604%" y="165" width="0.0137%" height="15" fill="rgb(216,135,14)" fg:x="14575" fg:w="2"/><text x="100.0104%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (5 samples, 0.03%)</title><rect x="99.7741%" y="165" width="0.0342%" height="15" fill="rgb(241,47,5)" fg:x="14577" fg:w="5"/><text x="100.0241%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="99.7741%" y="149" width="0.0342%" height="15" fill="rgb(233,42,35)" fg:x="14577" fg:w="5"/><text x="100.0241%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="99.7810%" y="133" width="0.0274%" height="15" fill="rgb(231,13,6)" fg:x="14578" fg:w="4"/><text x="100.0310%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::compute_with_borders_buf (20 samples, 0.14%)</title><rect x="99.7194%" y="197" width="0.1369%" height="15" fill="rgb(207,181,40)" fg:x="14569" fg:w="20"/><text x="99.9694%" y="207.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::compute_with_borders_buf::_{{closure}} (16 samples, 0.11%)</title><rect x="99.7467%" y="181" width="0.1095%" height="15" fill="rgb(254,173,49)" fg:x="14573" fg:w="16"/><text x="99.9967%" y="191.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::can_cross_face_s2 (7 samples, 0.05%)</title><rect x="99.8084%" y="165" width="0.0479%" height="15" fill="rgb(221,1,38)" fg:x="14582" fg:w="7"/><text x="100.0584%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::micro::micro_face_cell_open_s2 (6 samples, 0.04%)</title><rect x="99.8152%" y="149" width="0.0411%" height="15" fill="rgb(206,124,46)" fg:x="14583" fg:w="6"/><text x="100.0652%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`wcc::benches (788 samples, 5.39%)</title><rect x="94.5106%" y="213" width="5.3936%" height="15" fill="rgb(249,21,11)" fg:x="13808" fg:w="788"/><text x="94.7606%" y="223.50">wcc-570..</text></g><g><title>wcc-5705e778ccbf84ad`wcc::load_registry (6 samples, 0.04%)</title><rect x="99.8631%" y="197" width="0.0411%" height="15" fill="rgb(222,201,40)" fg:x="14590" fg:w="6"/><text x="100.1131%" y="207.50"></text></g><g><title>wcc-5705e778ccbf84ad`toml_edit::parser::document::document::_{{closure}}::_{{closure}} (2 samples, 0.01%)</title><rect x="99.8905%" y="181" width="0.0137%" height="15" fill="rgb(235,61,29)" fg:x="14594" fg:w="2"/><text x="100.1405%" y="191.50"></text></g><g><title>dyld`start (14,597 samples, 99.91%)</title><rect x="0.0000%" y="309" width="99.9110%" height="15" fill="rgb(219,207,3)" fg:x="0" fg:w="14597"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>wcc-5705e778ccbf84ad`main (14,596 samples, 99.90%)</title><rect x="0.0068%" y="293" width="99.9042%" height="15" fill="rgb(222,56,46)" fg:x="1" fg:w="14596"/><text x="0.2568%" y="303.50">wcc-5705e778ccbf84ad`main</text></g><g><title>wcc-5705e778ccbf84ad`std::rt::lang_start_internal (14,596 samples, 99.90%)</title><rect x="0.0068%" y="277" width="99.9042%" height="15" fill="rgb(239,76,54)" fg:x="1" fg:w="14596"/><text x="0.2568%" y="287.50">wcc-5705e778ccbf84ad`std::rt::lang_start_internal</text></g><g><title>wcc-5705e778ccbf84ad`std::rt::lang_start::_{{closure}} (14,596 samples, 99.90%)</title><rect x="0.0068%" y="261" width="99.9042%" height="15" fill="rgb(231,124,27)" fg:x="1" fg:w="14596"/><text x="0.2568%" y="271.50">wcc-5705e778ccbf84ad`std::rt::lang_start::_{{closure}}</text></g><g><title>wcc-5705e778ccbf84ad`std::sys::backtrace::__rust_begin_short_backtrace (14,596 samples, 99.90%)</title><rect x="0.0068%" y="245" width="99.9042%" height="15" fill="rgb(249,195,6)" fg:x="1" fg:w="14596"/><text x="0.2568%" y="255.50">wcc-5705e778ccbf84ad`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>wcc-5705e778ccbf84ad`wcc::main (14,596 samples, 99.90%)</title><rect x="0.0068%" y="229" width="99.9042%" height="15" fill="rgb(237,174,47)" fg:x="1" fg:w="14596"/><text x="0.2568%" y="239.50">wcc-5705e778ccbf84ad`wcc::main</text></g><g><title>all (14,610 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(206,201,31)" fg:x="0" fg:w="14610"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (13 samples, 0.09%)</title><rect x="99.9110%" y="309" width="0.0890%" height="15" fill="rgb(231,57,52)" fg:x="14597" fg:w="13"/><text x="100.1610%" y="319.50"></text></g></svg></svg>