<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="15204"><g><title>dyld`dyld4::LibSystemHelpersWrapper::exit (2 samples, 0.01%)</title><rect x="0.0000%" y="293" width="0.0132%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="303.50"></text></g><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (2 samples, 0.01%)</title><rect x="0.0000%" y="277" width="0.0132%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="287.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.01%)</title><rect x="0.0000%" y="261" width="0.0132%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="271.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (6 samples, 0.04%)</title><rect x="0.0263%" y="165" width="0.0395%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="6"/><text x="0.2763%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_3d (5 samples, 0.03%)</title><rect x="0.0658%" y="165" width="0.0329%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="5"/><text x="0.3158%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (2 samples, 0.01%)</title><rect x="0.0987%" y="165" width="0.0132%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="2"/><text x="0.3487%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (61 samples, 0.40%)</title><rect x="0.1118%" y="165" width="0.4012%" height="15" fill="rgb(207,160,47)" fg:x="17" fg:w="61"/><text x="0.3618%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (16 samples, 0.11%)</title><rect x="0.5130%" y="165" width="0.1052%" height="15" fill="rgb(228,23,34)" fg:x="78" fg:w="16"/><text x="0.7630%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (31 samples, 0.20%)</title><rect x="0.6248%" y="149" width="0.2039%" height="15" fill="rgb(218,30,26)" fg:x="95" fg:w="31"/><text x="0.8748%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (72 samples, 0.47%)</title><rect x="0.8287%" y="149" width="0.4736%" height="15" fill="rgb(220,122,19)" fg:x="126" fg:w="72"/><text x="1.0787%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (13 samples, 0.09%)</title><rect x="1.3023%" y="149" width="0.0855%" height="15" fill="rgb(250,228,42)" fg:x="198" fg:w="13"/><text x="1.5523%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_3d (5 samples, 0.03%)</title><rect x="1.3878%" y="149" width="0.0329%" height="15" fill="rgb(240,193,28)" fg:x="211" fg:w="5"/><text x="1.6378%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (9 samples, 0.06%)</title><rect x="1.4207%" y="149" width="0.0592%" height="15" fill="rgb(216,20,37)" fg:x="216" fg:w="9"/><text x="1.6707%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (7 samples, 0.05%)</title><rect x="1.4338%" y="133" width="0.0460%" height="15" fill="rgb(206,188,39)" fg:x="218" fg:w="7"/><text x="1.6838%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="1.4536%" y="117" width="0.0263%" height="15" fill="rgb(217,207,13)" fg:x="221" fg:w="4"/><text x="1.7036%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (198 samples, 1.30%)</title><rect x="2.6375%" y="133" width="1.3023%" height="15" fill="rgb(231,73,38)" fg:x="401" fg:w="198"/><text x="2.8875%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (26 samples, 0.17%)</title><rect x="3.9398%" y="133" width="0.1710%" height="15" fill="rgb(225,20,46)" fg:x="599" fg:w="26"/><text x="4.1898%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_chunk::generate_chunk_buffer (630 samples, 4.14%)</title><rect x="0.0197%" y="181" width="4.1436%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="630"/><text x="0.2697%" y="191.50">wcc-5..</text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (539 samples, 3.55%)</title><rect x="0.6183%" y="165" width="3.5451%" height="15" fill="rgb(221,200,47)" fg:x="94" fg:w="539"/><text x="0.8683%" y="175.50">wcc-..</text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (408 samples, 2.68%)</title><rect x="1.4799%" y="149" width="2.6835%" height="15" fill="rgb(226,26,5)" fg:x="225" fg:w="408"/><text x="1.7299%" y="159.50">wc..</text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (8 samples, 0.05%)</title><rect x="4.1108%" y="133" width="0.0526%" height="15" fill="rgb(249,33,26)" fg:x="625" fg:w="8"/><text x="4.3608%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (106 samples, 0.70%)</title><rect x="4.1831%" y="165" width="0.6972%" height="15" fill="rgb(235,183,28)" fg:x="636" fg:w="106"/><text x="4.4331%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightBorders::from_grid (2 samples, 0.01%)</title><rect x="4.8869%" y="165" width="0.0132%" height="15" fill="rgb(221,5,38)" fg:x="743" fg:w="2"/><text x="5.1369%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro (6,559 samples, 43.14%)</title><rect x="4.9000%" y="165" width="43.1400%" height="15" fill="rgb(247,18,42)" fg:x="745" fg:w="6559"/><text x="5.1500%" y="175.50">wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_..</text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro::_{{closure}} (588 samples, 3.87%)</title><rect x="48.0400%" y="165" width="3.8674%" height="15" fill="rgb(241,131,45)" fg:x="7304" fg:w="588"/><text x="48.2900%" y="175.50">wcc-..</text></g><g><title>libsystem_malloc.dylib`free_medium (2 samples, 0.01%)</title><rect x="51.9074%" y="149" width="0.0132%" height="15" fill="rgb(249,31,29)" fg:x="7892" fg:w="2"/><text x="52.1574%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`mvm_madvise_free_plat (2 samples, 0.01%)</title><rect x="51.9074%" y="133" width="0.0132%" height="15" fill="rgb(225,111,53)" fg:x="7892" fg:w="2"/><text x="52.1574%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (2 samples, 0.01%)</title><rect x="51.9074%" y="117" width="0.0132%" height="15" fill="rgb(238,160,17)" fg:x="7892" fg:w="2"/><text x="52.1574%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (307 samples, 2.02%)</title><rect x="51.9271%" y="149" width="2.0192%" height="15" fill="rgb(214,148,48)" fg:x="7895" fg:w="307"/><text x="52.1771%" y="159.50">l..</text></g><g><title>libsystem_kernel.dylib`vm_copy (12 samples, 0.08%)</title><rect x="53.9463%" y="53" width="0.0789%" height="15" fill="rgb(232,36,49)" fg:x="8202" fg:w="12"/><text x="54.1963%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (12 samples, 0.08%)</title><rect x="53.9463%" y="37" width="0.0789%" height="15" fill="rgb(209,103,24)" fg:x="8202" fg:w="12"/><text x="54.1963%" y="47.50"></text></g><g><title>wcc-5705e778ccbf84ad`alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (13 samples, 0.09%)</title><rect x="53.9463%" y="149" width="0.0855%" height="15" fill="rgb(229,88,8)" fg:x="8202" fg:w="13"/><text x="54.1963%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`alloc::raw_vec::RawVec&lt;T,A&gt;::grow_one (13 samples, 0.09%)</title><rect x="53.9463%" y="133" width="0.0855%" height="15" fill="rgb(213,181,19)" fg:x="8202" fg:w="13"/><text x="54.1963%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`alloc::raw_vec::finish_grow (13 samples, 0.09%)</title><rect x="53.9463%" y="117" width="0.0855%" height="15" fill="rgb(254,191,54)" fg:x="8202" fg:w="13"/><text x="54.1963%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (13 samples, 0.09%)</title><rect x="53.9463%" y="101" width="0.0855%" height="15" fill="rgb(241,83,37)" fg:x="8202" fg:w="13"/><text x="54.1963%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (13 samples, 0.09%)</title><rect x="53.9463%" y="85" width="0.0855%" height="15" fill="rgb(233,36,39)" fg:x="8202" fg:w="13"/><text x="54.1963%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (13 samples, 0.09%)</title><rect x="53.9463%" y="69" width="0.0855%" height="15" fill="rgb(226,3,54)" fg:x="8202" fg:w="13"/><text x="54.1963%" y="79.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::ptr::drop_in_place&lt;geist_lighting::micro::compute_light_with_borders_buf_micro::DialQ&gt; (116 samples, 0.76%)</title><rect x="54.0318%" y="149" width="0.7630%" height="15" fill="rgb(245,192,40)" fg:x="8215" fg:w="116"/><text x="54.2818%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (116 samples, 0.76%)</title><rect x="54.0318%" y="133" width="0.7630%" height="15" fill="rgb(238,167,29)" fg:x="8215" fg:w="116"/><text x="54.2818%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_large (115 samples, 0.76%)</title><rect x="54.0384%" y="117" width="0.7564%" height="15" fill="rgb(232,182,51)" fg:x="8216" fg:w="115"/><text x="54.2884%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_plat (115 samples, 0.76%)</title><rect x="54.0384%" y="101" width="0.7564%" height="15" fill="rgb(231,60,39)" fg:x="8216" fg:w="115"/><text x="54.2884%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (115 samples, 0.76%)</title><rect x="54.0384%" y="85" width="0.7564%" height="15" fill="rgb(208,69,12)" fg:x="8216" fg:w="115"/><text x="54.2884%" y="95.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro::_{{closure}} (5,815 samples, 38.25%)</title><rect x="54.8014%" y="149" width="38.2465%" height="15" fill="rgb(235,93,37)" fg:x="8332" fg:w="5815"/><text x="55.0514%" y="159.50">wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with..</text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (11 samples, 0.07%)</title><rect x="93.0479%" y="149" width="0.0723%" height="15" fill="rgb(213,116,39)" fg:x="14147" fg:w="11"/><text x="93.2979%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (2 samples, 0.01%)</title><rect x="93.1202%" y="149" width="0.0132%" height="15" fill="rgb(222,207,29)" fg:x="14158" fg:w="2"/><text x="93.3702%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (5 samples, 0.03%)</title><rect x="93.1334%" y="133" width="0.0329%" height="15" fill="rgb(206,96,30)" fg:x="14160" fg:w="5"/><text x="93.3834%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (9 samples, 0.06%)</title><rect x="93.1663%" y="133" width="0.0592%" height="15" fill="rgb(218,138,4)" fg:x="14165" fg:w="9"/><text x="93.4163%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (2 samples, 0.01%)</title><rect x="93.2255%" y="133" width="0.0132%" height="15" fill="rgb(250,191,14)" fg:x="14174" fg:w="2"/><text x="93.4755%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (22 samples, 0.14%)</title><rect x="93.3899%" y="117" width="0.1447%" height="15" fill="rgb(239,60,40)" fg:x="14199" fg:w="22"/><text x="93.6399%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (2 samples, 0.01%)</title><rect x="93.5346%" y="117" width="0.0132%" height="15" fill="rgb(206,27,48)" fg:x="14221" fg:w="2"/><text x="93.7846%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro (6,333 samples, 41.65%)</title><rect x="51.9074%" y="165" width="41.6535%" height="15" fill="rgb(225,35,8)" fg:x="7892" fg:w="6333"/><text x="52.1574%" y="175.50">wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borde..</text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (65 samples, 0.43%)</title><rect x="93.1334%" y="149" width="0.4275%" height="15" fill="rgb(250,213,24)" fg:x="14160" fg:w="65"/><text x="93.3834%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (49 samples, 0.32%)</title><rect x="93.2386%" y="133" width="0.3223%" height="15" fill="rgb(247,123,22)" fg:x="14176" fg:w="49"/><text x="93.4886%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (2 samples, 0.01%)</title><rect x="93.5478%" y="117" width="0.0132%" height="15" fill="rgb(231,138,38)" fg:x="14223" fg:w="2"/><text x="93.7978%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::sample_face_local_s2 (9 samples, 0.06%)</title><rect x="93.5609%" y="149" width="0.0592%" height="15" fill="rgb(231,145,46)" fg:x="14225" fg:w="9"/><text x="93.8109%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::add_cube (13 samples, 0.09%)</title><rect x="93.5609%" y="165" width="0.0855%" height="15" fill="rgb(251,118,11)" fg:x="14225" fg:w="13"/><text x="93.8109%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::ptr::drop_in_place&lt;geist_world::worldgen::WorldGenParams&gt; (9 samples, 0.06%)</title><rect x="93.6727%" y="133" width="0.0592%" height="15" fill="rgb(217,147,25)" fg:x="14242" fg:w="9"/><text x="93.9227%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (8 samples, 0.05%)</title><rect x="93.6793%" y="117" width="0.0526%" height="15" fill="rgb(247,81,37)" fg:x="14243" fg:w="8"/><text x="93.9293%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (2 samples, 0.01%)</title><rect x="93.7516%" y="117" width="0.0132%" height="15" fill="rgb(209,12,38)" fg:x="14254" fg:w="2"/><text x="94.0016%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (11 samples, 0.07%)</title><rect x="93.7385%" y="133" width="0.0723%" height="15" fill="rgb(227,1,9)" fg:x="14252" fg:w="11"/><text x="93.9885%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (5 samples, 0.03%)</title><rect x="93.7780%" y="117" width="0.0329%" height="15" fill="rgb(248,47,43)" fg:x="14258" fg:w="5"/><text x="94.0280%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (2 samples, 0.01%)</title><rect x="93.7977%" y="101" width="0.0132%" height="15" fill="rgb(221,10,30)" fg:x="14261" fg:w="2"/><text x="94.0477%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (6 samples, 0.04%)</title><rect x="93.8371%" y="101" width="0.0395%" height="15" fill="rgb(210,229,1)" fg:x="14267" fg:w="6"/><text x="94.0871%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 0.01%)</title><rect x="93.8766%" y="101" width="0.0132%" height="15" fill="rgb(222,148,37)" fg:x="14273" fg:w="2"/><text x="94.1266%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.03%)</title><rect x="93.8898%" y="101" width="0.0329%" height="15" fill="rgb(234,67,33)" fg:x="14275" fg:w="5"/><text x="94.1398%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc_type (3 samples, 0.02%)</title><rect x="93.9029%" y="85" width="0.0197%" height="15" fill="rgb(247,98,35)" fg:x="14277" fg:w="3"/><text x="94.1529%" y="95.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime (41 samples, 0.27%)</title><rect x="93.6596%" y="149" width="0.2697%" height="15" fill="rgb(247,138,52)" fg:x="14240" fg:w="41"/><text x="93.9096%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::make_gen_ctx (18 samples, 0.12%)</title><rect x="93.8108%" y="133" width="0.1184%" height="15" fill="rgb(213,79,30)" fg:x="14263" fg:w="18"/><text x="94.0608%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;geist_world::worldgen::WorldGenParams as core::clone::Clone&gt;::clone (16 samples, 0.11%)</title><rect x="93.8240%" y="117" width="0.1052%" height="15" fill="rgb(246,177,23)" fg:x="14265" fg:w="16"/><text x="94.0740%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::add_water_cube (44 samples, 0.29%)</title><rect x="93.6464%" y="165" width="0.2894%" height="15" fill="rgb(230,62,27)" fg:x="14238" fg:w="44"/><text x="93.8964%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::emit_into (80 samples, 0.53%)</title><rect x="93.9358%" y="165" width="0.5262%" height="15" fill="rgb(216,154,8)" fg:x="14282" fg:w="80"/><text x="94.1858%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::new (3 samples, 0.02%)</title><rect x="94.4620%" y="165" width="0.0197%" height="15" fill="rgb(244,35,45)" fg:x="14362" fg:w="3"/><text x="94.7120%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.02%)</title><rect x="94.4620%" y="149" width="0.0197%" height="15" fill="rgb(251,115,12)" fg:x="14362" fg:w="3"/><text x="94.7120%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (3 samples, 0.02%)</title><rect x="94.4620%" y="133" width="0.0197%" height="15" fill="rgb(240,54,50)" fg:x="14362" fg:w="3"/><text x="94.7120%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (2 samples, 0.01%)</title><rect x="94.5606%" y="117" width="0.0132%" height="15" fill="rgb(233,84,52)" fg:x="14377" fg:w="2"/><text x="94.8106%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (4 samples, 0.03%)</title><rect x="94.5738%" y="117" width="0.0263%" height="15" fill="rgb(207,117,47)" fg:x="14379" fg:w="4"/><text x="94.8238%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (10 samples, 0.07%)</title><rect x="94.6725%" y="101" width="0.0658%" height="15" fill="rgb(249,43,39)" fg:x="14394" fg:w="10"/><text x="94.9225%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (35 samples, 0.23%)</title><rect x="94.5278%" y="133" width="0.2302%" height="15" fill="rgb(209,38,44)" fg:x="14372" fg:w="35"/><text x="94.7778%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (23 samples, 0.15%)</title><rect x="94.6067%" y="117" width="0.1513%" height="15" fill="rgb(236,212,23)" fg:x="14384" fg:w="23"/><text x="94.8567%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (3 samples, 0.02%)</title><rect x="94.7382%" y="101" width="0.0197%" height="15" fill="rgb(242,79,21)" fg:x="14404" fg:w="3"/><text x="94.9882%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime (42 samples, 0.28%)</title><rect x="94.4949%" y="149" width="0.2762%" height="15" fill="rgb(211,96,35)" fg:x="14367" fg:w="42"/><text x="94.7449%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::make_gen_ctx (2 samples, 0.01%)</title><rect x="94.7580%" y="133" width="0.0132%" height="15" fill="rgb(253,215,40)" fg:x="14407" fg:w="2"/><text x="95.0080%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::seed_neighbor_seams (45 samples, 0.30%)</title><rect x="94.4817%" y="165" width="0.2960%" height="15" fill="rgb(211,81,21)" fg:x="14365" fg:w="45"/><text x="94.7317%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::build::build_chunk_wcc_cpu_buf (13,778 samples, 90.62%)</title><rect x="4.1634%" y="181" width="90.6209%" height="15" fill="rgb(208,190,38)" fg:x="633" fg:w="13778"/><text x="4.4134%" y="191.50">wcc-5705e778ccbf84ad`geist_mesh_cpu::build::build_chunk_wcc_cpu_buf</text></g><g><title>wcc-5705e778ccbf84ad`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (14,410 samples, 94.78%)</title><rect x="0.0132%" y="213" width="94.7777%" height="15" fill="rgb(235,213,38)" fg:x="2" fg:w="14410"/><text x="0.2632%" y="223.50">wcc-5705e778ccbf84ad`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench</text></g><g><title>wcc-5705e778ccbf84ad`criterion::bencher::Bencher&lt;M&gt;::iter (14,410 samples, 94.78%)</title><rect x="0.0132%" y="197" width="94.7777%" height="15" fill="rgb(237,122,38)" fg:x="2" fg:w="14410"/><text x="0.2632%" y="207.50">wcc-5705e778ccbf84ad`criterion::bencher::Bencher&lt;M&gt;::iter</text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (8 samples, 0.05%)</title><rect x="94.8106%" y="149" width="0.0526%" height="15" fill="rgb(244,218,35)" fg:x="14415" fg:w="8"/><text x="95.0606%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_3d (5 samples, 0.03%)</title><rect x="94.8698%" y="149" width="0.0329%" height="15" fill="rgb(240,68,47)" fg:x="14424" fg:w="5"/><text x="95.1198%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (26 samples, 0.17%)</title><rect x="94.9027%" y="149" width="0.1710%" height="15" fill="rgb(210,16,53)" fg:x="14429" fg:w="26"/><text x="95.1527%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (6 samples, 0.04%)</title><rect x="95.0868%" y="133" width="0.0395%" height="15" fill="rgb(235,124,12)" fg:x="14457" fg:w="6"/><text x="95.3368%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (35 samples, 0.23%)</title><rect x="95.1263%" y="133" width="0.2302%" height="15" fill="rgb(224,169,11)" fg:x="14463" fg:w="35"/><text x="95.3763%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (10 samples, 0.07%)</title><rect x="95.3565%" y="133" width="0.0658%" height="15" fill="rgb(250,166,2)" fg:x="14498" fg:w="10"/><text x="95.6065%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_3d (4 samples, 0.03%)</title><rect x="95.4223%" y="133" width="0.0263%" height="15" fill="rgb(242,216,29)" fg:x="14508" fg:w="4"/><text x="95.6723%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (4 samples, 0.03%)</title><rect x="95.4486%" y="133" width="0.0263%" height="15" fill="rgb(230,116,27)" fg:x="14512" fg:w="4"/><text x="95.6986%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="95.4551%" y="117" width="0.0197%" height="15" fill="rgb(228,99,48)" fg:x="14513" fg:w="3"/><text x="95.7051%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="95.4617%" y="101" width="0.0132%" height="15" fill="rgb(253,11,6)" fg:x="14514" fg:w="2"/><text x="95.7117%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (60 samples, 0.39%)</title><rect x="96.0339%" y="117" width="0.3946%" height="15" fill="rgb(247,143,39)" fg:x="14601" fg:w="60"/><text x="96.2839%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (11 samples, 0.07%)</title><rect x="96.4286%" y="117" width="0.0723%" height="15" fill="rgb(236,97,10)" fg:x="14661" fg:w="11"/><text x="96.6786%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_chunk::generate_chunk_buffer (261 samples, 1.72%)</title><rect x="94.8106%" y="165" width="1.7167%" height="15" fill="rgb(233,208,19)" fg:x="14415" fg:w="261"/><text x="95.0606%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (220 samples, 1.45%)</title><rect x="95.0802%" y="149" width="1.4470%" height="15" fill="rgb(216,164,2)" fg:x="14456" fg:w="220"/><text x="95.3302%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (160 samples, 1.05%)</title><rect x="95.4749%" y="133" width="1.0524%" height="15" fill="rgb(220,129,5)" fg:x="14516" fg:w="160"/><text x="95.7249%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (4 samples, 0.03%)</title><rect x="96.5009%" y="117" width="0.0263%" height="15" fill="rgb(242,17,10)" fg:x="14672" fg:w="4"/><text x="96.7509%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::compute_with_borders_buf::_{{closure}} (2 samples, 0.01%)</title><rect x="96.5272%" y="165" width="0.0132%" height="15" fill="rgb(242,107,0)" fg:x="14676" fg:w="2"/><text x="96.7772%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (2 samples, 0.01%)</title><rect x="96.5470%" y="149" width="0.0132%" height="15" fill="rgb(251,28,31)" fg:x="14679" fg:w="2"/><text x="96.7970%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (4 samples, 0.03%)</title><rect x="96.5601%" y="133" width="0.0263%" height="15" fill="rgb(233,223,10)" fg:x="14681" fg:w="4"/><text x="96.8101%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (5 samples, 0.03%)</title><rect x="96.5864%" y="133" width="0.0329%" height="15" fill="rgb(215,21,27)" fg:x="14685" fg:w="5"/><text x="96.8364%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (3 samples, 0.02%)</title><rect x="96.5996%" y="117" width="0.0197%" height="15" fill="rgb(232,23,21)" fg:x="14687" fg:w="3"/><text x="96.8496%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::compute_with_borders_buf (17 samples, 0.11%)</title><rect x="96.5404%" y="165" width="0.1118%" height="15" fill="rgb(244,5,23)" fg:x="14678" fg:w="17"/><text x="96.7904%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::compute_with_borders_buf::_{{closure}} (14 samples, 0.09%)</title><rect x="96.5601%" y="149" width="0.0921%" height="15" fill="rgb(226,81,46)" fg:x="14681" fg:w="14"/><text x="96.8101%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::can_cross_face_s2 (5 samples, 0.03%)</title><rect x="96.6193%" y="133" width="0.0329%" height="15" fill="rgb(247,70,30)" fg:x="14690" fg:w="5"/><text x="96.8693%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::micro::micro_face_cell_open_s2 (2 samples, 0.01%)</title><rect x="96.6390%" y="117" width="0.0132%" height="15" fill="rgb(212,68,19)" fg:x="14693" fg:w="2"/><text x="96.8890%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::sample_face_local_s2 (2 samples, 0.01%)</title><rect x="96.6522%" y="165" width="0.0132%" height="15" fill="rgb(240,187,13)" fg:x="14695" fg:w="2"/><text x="96.9022%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro (15 samples, 0.10%)</title><rect x="96.6917%" y="149" width="0.0987%" height="15" fill="rgb(223,113,26)" fg:x="14701" fg:w="15"/><text x="96.9417%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro::_{{closure}} (2 samples, 0.01%)</title><rect x="96.7903%" y="149" width="0.0132%" height="15" fill="rgb(206,192,2)" fg:x="14716" fg:w="2"/><text x="97.0403%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro::_{{closure}} (19 samples, 0.12%)</title><rect x="96.8100%" y="133" width="0.1250%" height="15" fill="rgb(241,108,4)" fg:x="14719" fg:w="19"/><text x="97.0600%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (3 samples, 0.02%)</title><rect x="96.9416%" y="117" width="0.0197%" height="15" fill="rgb(247,173,49)" fg:x="14739" fg:w="3"/><text x="97.1916%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (4 samples, 0.03%)</title><rect x="97.0074%" y="101" width="0.0263%" height="15" fill="rgb(224,114,35)" fg:x="14749" fg:w="4"/><text x="97.2574%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::micro::compute_light_with_borders_buf_micro (37 samples, 0.24%)</title><rect x="96.8035%" y="149" width="0.2434%" height="15" fill="rgb(245,159,27)" fg:x="14718" fg:w="37"/><text x="97.0535%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (16 samples, 0.11%)</title><rect x="96.9416%" y="133" width="0.1052%" height="15" fill="rgb(245,172,44)" fg:x="14739" fg:w="16"/><text x="97.1916%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (13 samples, 0.09%)</title><rect x="96.9613%" y="117" width="0.0855%" height="15" fill="rgb(236,23,11)" fg:x="14742" fg:w="13"/><text x="97.2113%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (2 samples, 0.01%)</title><rect x="97.0337%" y="101" width="0.0132%" height="15" fill="rgb(205,117,38)" fg:x="14753" fg:w="2"/><text x="97.2837%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::sample_face_local_s2 (5 samples, 0.03%)</title><rect x="97.0534%" y="133" width="0.0329%" height="15" fill="rgb(237,72,25)" fg:x="14756" fg:w="5"/><text x="97.3034%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_x (7 samples, 0.05%)</title><rect x="97.0863%" y="133" width="0.0460%" height="15" fill="rgb(244,70,9)" fg:x="14761" fg:w="7"/><text x="97.3363%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::KeyTable::ensure (5 samples, 0.03%)</title><rect x="97.0994%" y="117" width="0.0329%" height="15" fill="rgb(217,125,39)" fg:x="14763" fg:w="5"/><text x="97.3494%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (4 samples, 0.03%)</title><rect x="97.1060%" y="101" width="0.0263%" height="15" fill="rgb(235,36,10)" fg:x="14764" fg:w="4"/><text x="97.3560%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;std::hash::random::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="97.1126%" y="85" width="0.0197%" height="15" fill="rgb(251,123,47)" fg:x="14765" fg:w="3"/><text x="97.3626%" y="95.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_y (4 samples, 0.03%)</title><rect x="97.1323%" y="133" width="0.0263%" height="15" fill="rgb(221,13,13)" fg:x="14768" fg:w="4"/><text x="97.3823%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::KeyTable::ensure (3 samples, 0.02%)</title><rect x="97.1389%" y="117" width="0.0197%" height="15" fill="rgb(238,131,9)" fg:x="14769" fg:w="3"/><text x="97.3889%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::add_cube (21 samples, 0.14%)</title><rect x="97.0468%" y="149" width="0.1381%" height="15" fill="rgb(211,50,8)" fg:x="14755" fg:w="21"/><text x="97.2968%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_z (4 samples, 0.03%)</title><rect x="97.1586%" y="133" width="0.0263%" height="15" fill="rgb(245,182,24)" fg:x="14772" fg:w="4"/><text x="97.4086%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::emit_into (21 samples, 0.14%)</title><rect x="97.1850%" y="149" width="0.1381%" height="15" fill="rgb(242,14,37)" fg:x="14776" fg:w="21"/><text x="97.4350%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (2 samples, 0.01%)</title><rect x="97.3362%" y="101" width="0.0132%" height="15" fill="rgb(246,228,12)" fg:x="14799" fg:w="2"/><text x="97.5862%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (9 samples, 0.06%)</title><rect x="97.3297%" y="117" width="0.0592%" height="15" fill="rgb(213,55,15)" fg:x="14798" fg:w="9"/><text x="97.5797%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (5 samples, 0.03%)</title><rect x="97.3560%" y="101" width="0.0329%" height="15" fill="rgb(209,9,3)" fg:x="14802" fg:w="5"/><text x="97.6060%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (2 samples, 0.01%)</title><rect x="97.3757%" y="85" width="0.0132%" height="15" fill="rgb(230,59,30)" fg:x="14805" fg:w="2"/><text x="97.6257%" y="95.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::build::build_chunk_wcc_cpu_buf (111 samples, 0.73%)</title><rect x="96.6654%" y="165" width="0.7301%" height="15" fill="rgb(209,121,21)" fg:x="14697" fg:w="111"/><text x="96.9154%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::seed_neighbor_seams (10 samples, 0.07%)</title><rect x="97.3297%" y="149" width="0.0658%" height="15" fill="rgb(220,109,13)" fg:x="14798" fg:w="10"/><text x="97.5797%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime (10 samples, 0.07%)</title><rect x="97.3297%" y="133" width="0.0658%" height="15" fill="rgb(232,18,1)" fg:x="14798" fg:w="10"/><text x="97.5797%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::sample_face_local_s2 (18 samples, 0.12%)</title><rect x="97.4086%" y="149" width="0.1184%" height="15" fill="rgb(215,41,42)" fg:x="14810" fg:w="18"/><text x="97.6586%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_x (6 samples, 0.04%)</title><rect x="97.5270%" y="149" width="0.0395%" height="15" fill="rgb(224,123,36)" fg:x="14828" fg:w="6"/><text x="97.7770%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::KeyTable::ensure (5 samples, 0.03%)</title><rect x="97.5335%" y="133" width="0.0329%" height="15" fill="rgb(240,125,3)" fg:x="14829" fg:w="5"/><text x="97.7835%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="97.5335%" y="117" width="0.0329%" height="15" fill="rgb(205,98,50)" fg:x="14829" fg:w="5"/><text x="97.7835%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_y (16 samples, 0.11%)</title><rect x="97.5664%" y="149" width="0.1052%" height="15" fill="rgb(205,185,37)" fg:x="14834" fg:w="16"/><text x="97.8164%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::KeyTable::ensure (7 samples, 0.05%)</title><rect x="97.6256%" y="133" width="0.0460%" height="15" fill="rgb(238,207,15)" fg:x="14843" fg:w="7"/><text x="97.8756%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (4 samples, 0.03%)</title><rect x="97.6454%" y="117" width="0.0263%" height="15" fill="rgb(213,199,42)" fg:x="14846" fg:w="4"/><text x="97.8954%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (2 samples, 0.01%)</title><rect x="97.7111%" y="133" width="0.0132%" height="15" fill="rgb(235,201,11)" fg:x="14856" fg:w="2"/><text x="97.9611%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::add_cube (55 samples, 0.36%)</title><rect x="97.3954%" y="165" width="0.3617%" height="15" fill="rgb(207,46,11)" fg:x="14808" fg:w="55"/><text x="97.6454%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::toggle_z (13 samples, 0.09%)</title><rect x="97.6717%" y="149" width="0.0855%" height="15" fill="rgb(241,35,35)" fg:x="14850" fg:w="13"/><text x="97.9217%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::KeyTable::ensure (5 samples, 0.03%)</title><rect x="97.7243%" y="133" width="0.0329%" height="15" fill="rgb(243,32,47)" fg:x="14858" fg:w="5"/><text x="97.9743%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="97.7243%" y="117" width="0.0329%" height="15" fill="rgb(247,202,23)" fg:x="14858" fg:w="5"/><text x="97.9743%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::emit_into (23 samples, 0.15%)</title><rect x="97.7637%" y="165" width="0.1513%" height="15" fill="rgb(219,102,11)" fg:x="14864" fg:w="23"/><text x="98.0137%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::emit::emit_face_rect_for_clipped (3 samples, 0.02%)</title><rect x="97.8953%" y="149" width="0.0197%" height="15" fill="rgb(243,110,44)" fg:x="14884" fg:w="3"/><text x="98.1453%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::mesh_build::MeshBuild::add_face_rect (3 samples, 0.02%)</title><rect x="97.8953%" y="133" width="0.0197%" height="15" fill="rgb(222,74,54)" fg:x="14884" fg:w="3"/><text x="98.1453%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::mesh_build::MeshBuild::add_quad (3 samples, 0.02%)</title><rect x="97.8953%" y="117" width="0.0197%" height="15" fill="rgb(216,99,12)" fg:x="14884" fg:w="3"/><text x="98.1453%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::new (2 samples, 0.01%)</title><rect x="97.9150%" y="165" width="0.0132%" height="15" fill="rgb(226,22,26)" fg:x="14887" fg:w="2"/><text x="98.1650%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.01%)</title><rect x="97.9150%" y="149" width="0.0132%" height="15" fill="rgb(217,163,10)" fg:x="14887" fg:w="2"/><text x="98.1650%" y="159.50"></text></g><g><title>libsystem_platform.dylib`__bzero (2 samples, 0.01%)</title><rect x="97.9150%" y="133" width="0.0132%" height="15" fill="rgb(213,25,53)" fg:x="14887" fg:w="2"/><text x="98.1650%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (5 samples, 0.03%)</title><rect x="97.9676%" y="101" width="0.0329%" height="15" fill="rgb(252,105,26)" fg:x="14895" fg:w="5"/><text x="98.2176%" y="111.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (10 samples, 0.07%)</title><rect x="97.9413%" y="133" width="0.0658%" height="15" fill="rgb(220,39,43)" fg:x="14891" fg:w="10"/><text x="98.1913%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (9 samples, 0.06%)</title><rect x="97.9479%" y="117" width="0.0592%" height="15" fill="rgb(229,68,48)" fg:x="14892" fg:w="9"/><text x="98.1979%" y="127.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime (13 samples, 0.09%)</title><rect x="97.9282%" y="149" width="0.0855%" height="15" fill="rgb(252,8,32)" fg:x="14889" fg:w="13"/><text x="98.1782%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_mesh_cpu::wcc::WccMesher::seed_neighbor_seams (14 samples, 0.09%)</title><rect x="97.9282%" y="165" width="0.0921%" height="15" fill="rgb(223,20,43)" fg:x="14889" fg:w="14"/><text x="98.1782%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;criterion::routine::Function&lt;M,F,T&gt; as criterion::routine::Routine&lt;M,T&gt;&gt;::bench (493 samples, 3.24%)</title><rect x="94.7908%" y="197" width="3.2426%" height="15" fill="rgb(229,81,49)" fg:x="14412" fg:w="493"/><text x="95.0408%" y="207.50">wcc..</text></g><g><title>wcc-5705e778ccbf84ad`criterion::bencher::Bencher&lt;M&gt;::iter (493 samples, 3.24%)</title><rect x="94.7908%" y="181" width="3.2426%" height="15" fill="rgb(236,28,36)" fg:x="14412" fg:w="493"/><text x="95.0408%" y="191.50">wcc..</text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (3 samples, 0.02%)</title><rect x="98.0466%" y="181" width="0.0197%" height="15" fill="rgb(249,185,26)" fg:x="14907" fg:w="3"/><text x="98.2966%" y="191.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (21 samples, 0.14%)</title><rect x="98.0729%" y="181" width="0.1381%" height="15" fill="rgb(249,174,33)" fg:x="14911" fg:w="21"/><text x="98.3229%" y="191.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (8 samples, 0.05%)</title><rect x="98.2110%" y="181" width="0.0526%" height="15" fill="rgb(233,201,37)" fg:x="14932" fg:w="8"/><text x="98.4610%" y="191.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (8 samples, 0.05%)</title><rect x="98.2702%" y="165" width="0.0526%" height="15" fill="rgb(221,78,26)" fg:x="14941" fg:w="8"/><text x="98.5202%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_3d (46 samples, 0.30%)</title><rect x="98.3228%" y="165" width="0.3026%" height="15" fill="rgb(250,127,30)" fg:x="14949" fg:w="46"/><text x="98.5728%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (3 samples, 0.02%)</title><rect x="98.6254%" y="165" width="0.0197%" height="15" fill="rgb(230,49,44)" fg:x="14995" fg:w="3"/><text x="98.8754%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_3d (4 samples, 0.03%)</title><rect x="98.6451%" y="165" width="0.0263%" height="15" fill="rgb(229,67,23)" fg:x="14998" fg:w="4"/><text x="98.8951%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (7 samples, 0.05%)</title><rect x="98.6714%" y="165" width="0.0460%" height="15" fill="rgb(249,83,47)" fg:x="15002" fg:w="7"/><text x="98.9214%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="98.6846%" y="149" width="0.0329%" height="15" fill="rgb(215,43,3)" fg:x="15004" fg:w="5"/><text x="98.9346%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="98.6977%" y="133" width="0.0197%" height="15" fill="rgb(238,154,13)" fg:x="15006" fg:w="3"/><text x="98.9477%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::gen_noise_single_2d (63 samples, 0.41%)</title><rect x="99.2436%" y="149" width="0.4144%" height="15" fill="rgb(219,56,2)" fg:x="15089" fg:w="63"/><text x="99.4936%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`fastnoise_lite::FastNoiseLite::get_noise_2d (11 samples, 0.07%)</title><rect x="99.6580%" y="149" width="0.0723%" height="15" fill="rgb(233,0,4)" fg:x="15152" fg:w="11"/><text x="99.9080%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_chunk::generate_chunk_buffer (259 samples, 1.70%)</title><rect x="98.0400%" y="197" width="1.7035%" height="15" fill="rgb(235,30,7)" fg:x="14906" fg:w="259"/><text x="98.2900%" y="207.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (225 samples, 1.48%)</title><rect x="98.2636%" y="181" width="1.4799%" height="15" fill="rgb(250,79,13)" fg:x="14940" fg:w="225"/><text x="98.5136%" y="191.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (156 samples, 1.03%)</title><rect x="98.7174%" y="165" width="1.0260%" height="15" fill="rgb(211,146,34)" fg:x="15009" fg:w="156"/><text x="98.9674%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with::_{{closure}} (2 samples, 0.01%)</title><rect x="99.7303%" y="149" width="0.0132%" height="15" fill="rgb(228,22,38)" fg:x="15163" fg:w="2"/><text x="99.9803%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (2 samples, 0.01%)</title><rect x="99.7566%" y="181" width="0.0132%" height="15" fill="rgb(235,168,5)" fg:x="15167" fg:w="2"/><text x="100.0066%" y="191.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_blocks::registry::BlockRegistry::id_by_name (8 samples, 0.05%)</title><rect x="99.7961%" y="165" width="0.0526%" height="15" fill="rgb(221,155,16)" fg:x="15173" fg:w="8"/><text x="100.0461%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`core::hash::BuildHasher::hash_one (5 samples, 0.03%)</title><rect x="99.8158%" y="149" width="0.0329%" height="15" fill="rgb(215,215,53)" fg:x="15176" fg:w="5"/><text x="100.0658%" y="159.50"></text></g><g><title>wcc-5705e778ccbf84ad`&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="99.8356%" y="133" width="0.0132%" height="15" fill="rgb(223,4,10)" fg:x="15179" fg:w="2"/><text x="100.0856%" y="143.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::compute_with_borders_buf (18 samples, 0.12%)</title><rect x="99.7566%" y="197" width="0.1184%" height="15" fill="rgb(234,103,6)" fg:x="15167" fg:w="18"/><text x="100.0066%" y="207.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::LightGrid::compute_with_borders_buf::_{{closure}} (16 samples, 0.11%)</title><rect x="99.7698%" y="181" width="0.1052%" height="15" fill="rgb(227,97,0)" fg:x="15169" fg:w="16"/><text x="100.0198%" y="191.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_lighting::can_cross_face_s2 (4 samples, 0.03%)</title><rect x="99.8487%" y="165" width="0.0263%" height="15" fill="rgb(234,150,53)" fg:x="15181" fg:w="4"/><text x="100.0987%" y="175.50"></text></g><g><title>wcc-5705e778ccbf84ad`geist_world::voxel::World::block_at_runtime_with (2 samples, 0.01%)</title><rect x="99.8750%" y="197" width="0.0132%" height="15" fill="rgb(228,201,54)" fg:x="15185" fg:w="2"/><text x="100.1250%" y="207.50"></text></g><g><title>dyld`start (15,191 samples, 99.91%)</title><rect x="0.0000%" y="309" width="99.9145%" height="15" fill="rgb(222,22,37)" fg:x="0" fg:w="15191"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>wcc-5705e778ccbf84ad`main (15,189 samples, 99.90%)</title><rect x="0.0132%" y="293" width="99.9013%" height="15" fill="rgb(237,53,32)" fg:x="2" fg:w="15189"/><text x="0.2632%" y="303.50">wcc-5705e778ccbf84ad`main</text></g><g><title>wcc-5705e778ccbf84ad`std::rt::lang_start_internal (15,189 samples, 99.90%)</title><rect x="0.0132%" y="277" width="99.9013%" height="15" fill="rgb(233,25,53)" fg:x="2" fg:w="15189"/><text x="0.2632%" y="287.50">wcc-5705e778ccbf84ad`std::rt::lang_start_internal</text></g><g><title>wcc-5705e778ccbf84ad`std::rt::lang_start::_{{closure}} (15,189 samples, 99.90%)</title><rect x="0.0132%" y="261" width="99.9013%" height="15" fill="rgb(210,40,34)" fg:x="2" fg:w="15189"/><text x="0.2632%" y="271.50">wcc-5705e778ccbf84ad`std::rt::lang_start::_{{closure}}</text></g><g><title>wcc-5705e778ccbf84ad`std::sys::backtrace::__rust_begin_short_backtrace (15,189 samples, 99.90%)</title><rect x="0.0132%" y="245" width="99.9013%" height="15" fill="rgb(241,220,44)" fg:x="2" fg:w="15189"/><text x="0.2632%" y="255.50">wcc-5705e778ccbf84ad`std::sys::backtrace::__rust_begin_short_backtrace</text></g><g><title>wcc-5705e778ccbf84ad`wcc::main (15,189 samples, 99.90%)</title><rect x="0.0132%" y="229" width="99.9013%" height="15" fill="rgb(235,28,35)" fg:x="2" fg:w="15189"/><text x="0.2632%" y="239.50">wcc-5705e778ccbf84ad`wcc::main</text></g><g><title>wcc-5705e778ccbf84ad`wcc::benches (779 samples, 5.12%)</title><rect x="94.7908%" y="213" width="5.1237%" height="15" fill="rgb(210,56,17)" fg:x="14412" fg:w="779"/><text x="95.0408%" y="223.50">wcc-57..</text></g><g><title>wcc-5705e778ccbf84ad`wcc::load_registry (4 samples, 0.03%)</title><rect x="99.8882%" y="197" width="0.0263%" height="15" fill="rgb(224,130,29)" fg:x="15187" fg:w="4"/><text x="100.1382%" y="207.50"></text></g><g><title>all (15,204 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(235,212,8)" fg:x="0" fg:w="15204"/><text x="0.2500%" y="335.50"></text></g><g><title>libsystem_kernel.dylib`__exit (13 samples, 0.09%)</title><rect x="99.9145%" y="309" width="0.0855%" height="15" fill="rgb(223,33,50)" fg:x="15191" fg:w="13"/><text x="100.1645%" y="319.50"></text></g></svg></svg>